BROKER SCHEMA OUTBOUND_TEXT_XML



CREATE COMPUTE MODULE EDGA_Get_TPRORD_Data_GetFormatType_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.ediStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDISTARTTIME;');
		SET Environment.variables.txnID = InputRoot.XMLNSC.PCS.Common_Ref;
		DECLARE MessageName CHARACTER InputRoot.XMLNSC.PCS.Action_In;
		DECLARE request BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
		DECLARE ReplaceCarriageReturn BLOB X'0d0a';			
		SET request = REPLACE(request, ReplaceCarriageReturn);
		SET Environment.variables.request = CAST(request AS CHARACTER CCSID 1208);
		SET Environment.variables.dbStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBSTARTTIME;');
		CALL EDI_GetFormatTypeByRefAndMsg(Environment.variables.txnID,MessageName,Environment.Variables.Result[],Environment.Variables.Result56[]);		
	END;
		
CREATE PROCEDURE EDI_GetFormatTypeByRefAndMsg( IN TransactionID CHARACTER,IN MessageName CHARACTER)
LANGUAGE DATABASE
DYNAMIC RESULT SETS 2
EXTERNAL NAME "dbo.EDI_GetFormatTypeByRefAndMsg";
END MODULE;


CREATE COMPUTE MODULE EDGA_Get_TPRORD_Data_xmlCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			
		DECLARE i INTEGER 1;
		CALL EDI_XGetTPRORD(Environment.variables.txnID,Environment.Variables.XMLResultHD[],Environment.Variables.XMLResultREC[],Environment.Variables.XMLResultFID[],Environment.Variables.XMLResultNP[],Environment.Variables.XMLResultIssueDt[]);
		
		
		SET OutputRoot.XMLNSC.TransportOrder.DocumentHeader.DocumentReference.DocumentType = Environment.Variables.XMLResultHD[1].DocumentType;
		DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.TransportOrder.DocumentHeader.DocumentReference;
		SET headerRef.DocumentName = Environment.Variables.XMLResultHD[1].DocumentName;
		SET headerRef.DocumentNumber = Environment.Variables.XMLResultHD[1].DocumentNumber;
		SET headerRef.CommonRefNumber = Environment.Variables.XMLResultHD[1].Trn_ord_Ref_No;
		SET headerRef.MessageType = Environment.Variables.XMLResultHD[1].MessageType;
		SET headerRef.SenderID = Environment.Variables.XMLResultHD[1].SenderID;		
		SET headerRef.PortCode = Environment.Variables.XMLResultHD[1].PortCode;
		
		DECLARE recPartyCardinality INTEGER CARDINALITY (Environment.Variables.XMLResultREC[]);
		WHILE (i <= recPartyCardinality) DO
			SET OutputRoot.XMLNSC.TransportOrder.DocumentHeader.DocumentExchangeDetails.ReceivingPartyDetails.ReceivingParty[i] = Environment.Variables.XMLResultREC[i].ReceivingParty;
			SET i = i + 1;
		END WHILE;
		
		
		SET OutputRoot.XMLNSC.TransportOrder.DocumentDetails.TransportOrderDetails.RecordType = Environment.Variables.XMLResultFID[1].RecordType;
		DECLARE transheaderRef REFERENCE TO OutputRoot.XMLNSC.TransportOrder.DocumentDetails.TransportOrderDetails;
		SET transheaderRef.TONumber = Environment.Variables.XMLResultFID[1].TONumber;
		SET transheaderRef.TransporterRegNumber = Environment.Variables.XMLResultFID[1].TransporterRegNumber;
		SET transheaderRef.TransporterName = Environment.Variables.XMLResultFID[1].TransporterName;
		SET transheaderRef.VCN = Environment.Variables.XMLResultFID[1].VCN;
		SET transheaderRef.IMONumber = Environment.Variables.XMLResultFID[1].IMONumber;
		SET transheaderRef.TOIssuedBy = Environment.Variables.XMLResultFID[1].TOIssuedBy;
		SET transheaderRef.TOIssuedDateAndTime = Environment.Variables.XMLResultFID[1].TOIssuedDateAndTime;
		SET transheaderRef.TOAckDateAndTime = Environment.Variables.XMLResultFID[1].TOAckDateAndTime;
		SET i = 1;
		DECLARE doDetails INTEGER CARDINALITY (Environment.Variables.XMLResultNP[]);
		WHILE (i <= doDetails) DO
			SET OutputRoot.XMLNSC.TransportOrder.DocumentDetails.DODetails.DO[i].DONumber = Environment.Variables.XMLResultNP[i].Trn_EDO_NO;
			SET OutputRoot.XMLNSC.TransportOrder.DocumentDetails.DODetails.DO[i].DODate = Environment.Variables.XMLResultNP[i].DODate;
			SET OutputRoot.XMLNSC.TransportOrder.DocumentDetails.DODetails.DO[i].ValidUpTo = Environment.Variables.XMLResultNP[i].ValidUpTo;
			SET i = i + 1;
		END WHILE;
		
		SET OutputRoot.XMLNSC.TransportOrder.DocumentSummary.IssuedDateTime = Environment.Variables.XMLResultIssueDt[1].IssuedDateTime;		
		RETURN TRUE;
	END;	
	
CREATE PROCEDURE EDI_XGetTPRORD( IN TransactionID CHARACTER)
LANGUAGE DATABASE
DYNAMIC RESULT SETS 5
EXTERNAL NAME "dbo.EDI_XGetTPRORD";
END MODULE;


CREATE COMPUTE MODULE EDGA_Get_TPRORD_Data_textCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL EDI_TGetTPRORD(Environment.variables.txnID,Environment.Variables.TXTResult1[],Environment.Variables.TXTResult2[],Environment.Variables.TXTResult3[],Environment.Variables.TXTResult4[],Environment.Variables.TXTResult5[],Environment.Variables.TXTResult6[]);
		SET Environment.variables.dbEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBENDTIME;');
		
		--UNH
		SET OutputRoot.DFDL.TPRORD.Header.Values = COALESCE(Environment.Variables.TXTResult1[1].DocumentType,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].DocumentName,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].DocumentNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].CommonRefNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].MessageType,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].SenderID,'');
		
		--RPD		
		DECLARE RecieveCount INTEGER CARDINALITY (Environment.Variables.TXTResult2[]);
		DECLARE Recipientlist CHARACTER;
		DECLARE K INTEGER 1;
		WHILE K <= RecieveCount DO
			IF K = 1 THEN
				SET Recipientlist = ''||Environment.Variables.TXTResult2[1].ReceivingParty; 
			ELSE
				SET Recipientlist = COALESCE(Recipientlist,'')||''||Environment.Variables.TXTResult2[K].ReceivingParty;
			END IF;
			SET K=K+1;
		END WHILE ;
		SET Recipientlist = TRIM(LEADING '' FROM Recipientlist);	
		SET OutputRoot.DFDL.TPRORD.RDP.BodyValues = Recipientlist;
		
		--NPD
		DECLARE RecieveCountNPD INTEGER CARDINALITY(Environment.Variables.TXTResult3[]);
		DECLARE RecipientlistNPD CHARACTER;
		DECLARE T INTEGER 1;
		WHILE T <= RecieveCountNPD DO
			IF T =1 THEN
				SET RecipientlistNPD = ''||Environment.Variables.TXTResult3[1].NotifyParty; 
			ELSE
				SET RecipientlistNPD = COALESCE(RecipientlistNPD,'')||''||Environment.Variables.TXTResult3[T].NotifyParty;
			END IF;			
			SET T=T+1;
		END WHILE ;
		SET RecipientlistNPD = TRIM(LEADING '' FROM RecipientlistNPD);
		SET OutputRoot.DFDL.TPRORD.NPD.BodyValues = RecipientlistNPD;
		
		--TOD
		SET OutputRoot.DFDL.TPRORD.TOD.TODValues = COALESCE(Environment.Variables.TXTResult4[1].RecordType,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].TONumber,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].TransporterRegNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].TransporterName,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].PortDeliveryOrderNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].TOIssuedDateAndTime,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].TOAckDateAndTime,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].TOIssuedBy,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].VCN,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].IMONumber,'');		
												
		--DOD
		
		SET OutputRoot.DFDL.TPRORD.DOD.DODValues = COALESCE(Environment.Variables.TXTResult5[1].PortDeliveryOrderNumber,'')||''||	
		COALESCE(Environment.Variables.TXTResult5[1].TOIssuedDateAndTime,'')||''||	
		COALESCE(Environment.Variables.TXTResult5[1].TOAckDateAndTime,'');
		
		--UNT
		
		SET OutputRoot.DFDL.TPRORD.trailer.Trailvalues = Environment.Variables.TXTResult6[1].IssuedDateTime;

	END;
	CREATE PROCEDURE EDI_TGetTPRORD( IN TransactionID CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 6
	EXTERNAL NAME "dbo.EDI_TGetTPRORD";
END MODULE;


CREATE COMPUTE MODULE EDGA_Get_TPRORD_Data_FailureResp_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE errorCode CHARACTER;
		DECLARE errorText CHARACTER;
		IF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Number;
			SET errorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Number;
			SET errorText = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Insert[3].Text;		
		ELSEIF (Environment.variables.noResultbyProcedure = TRUE) THEN
			SET errorCode = 'ERR01';
			SET errorText = 'No resultset obtained from EDI_GetFormatTypeByRefAndMsg procedure';
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Number;
			SET errorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Text;
		ELSE
			SET errorCode = 'ERR01';
			SET errorText = 'ESB exception occurred';
		END IF;
		
		DECLARE currTime CHARACTER CURRENT_TIMESTAMP;
		SET currTime = REPLACE(currTime,'TIMESTAMP ','');
		SET currTime = SUBSTRING(currTime BEFORE '.');
		SET currTime = SUBSTRING(currTime FROM 2);
		SET OutputRoot.XMLNSC.MQI_ERRORS.UserExceptionTree.Executiongroup = ExecutionGroupLabel;
		DECLARE userExcepRef REFERENCE TO OutputRoot.XMLNSC.MQI_ERRORS.UserExceptionTree;
		SET userExcepRef.Brokername = BrokerName;
		SET userExcepRef.FlowName = MessageFlowLabel;
		SET userExcepRef.ErrorCode = errorCode;
		SET userExcepRef.ErrorText = errorText;		


		SET OutputRoot.XMLNSC.MQI_ERRORS.TIMESTAMP = currTime;

		SET OutputRoot.XMLNSC.MQI_ERRORS.MsgBody = Environment.variables.request;

		SET OutputRoot.XMLNSC.MQI_ERRORS.ExceptionList = InputExceptionList;

		DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
		DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
		CALL EDI_InsIIBError(outputChar);
		COMMIT;

		RETURN TRUE;
	END;
	CREATE PROCEDURE EDI_InsIIBError( IN errorXML CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 0
	EXTERNAL NAME "dbo.EDI_InsIIBError";
END MODULE;


CREATE COMPUTE MODULE EDGA_Get_TPRORD_Data_FileCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF (EXISTS(InputRoot.XMLNSC[])) THEN
			DECLARE outputBlob BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
			DECLARE ReplaceCarriageReturn BLOB X'0d0a';
			
			SET outputBlob = REPLACE(outputBlob, ReplaceCarriageReturn);
			SET Environment.Variables.charData = CAST(outputBlob AS CHARACTER CCSID 1208);
			SET OutputRoot.XMLNSC = xmlBeautify(Environment.Variables.charData);	
			SET OutputRoot.XMLNSC.root = SUBSTRING(OutputRoot.XMLNSC AFTER '?>');
			
			DECLARE stringOut BLOB;
			SET stringOut = CAST(OutputRoot.XMLNSC.root as BLOB CCSID 1208);
		    IF (STARTSWITH(Environment.Variables.XMLResultREC[1].SFTP_PATH, 'http')) THEN
				DECLARE jreq CHARACTER Environment.Variables.charData;
				CREATE FIELD OutputRoot.JSON.Data.ReqHeader;
				SET OutputRoot.JSON.Data.ReqHeader.Channel_ID = 'IndianPCS';
				SET OutputRoot.JSON.Data.ReqHeader.Service_ID = '7057';
				SET OutputRoot.JSON.Data.ReqHeader.Request_ID = Environment.variables.txnID;
				SET Environment.reqDate = PASSTHRU('SELECT CURRENT_TIMESTAMP AS WebReq');
				SET OutputRoot.JSON.Data.ReqHeader.Request_Date = CAST(Environment.reqDate[1].WebReq AS CHARACTER);
				SET OutputRoot.JSON.Data.ReqHeader.Request_Date = REPLACE(OutputRoot.JSON.Data.ReqHeader.Request_Date,'TIMESTAMP ','');
				SET OutputRoot.JSON.Data.ReqHeader.Request_Date = SUBSTRING(OutputRoot.JSON.Data.ReqHeader.Request_Date FROM 2 FOR 10);
				SET OutputRoot.JSON.Data.ReqHeader.Request_Date = REPLACE(OutputRoot.JSON.Data.ReqHeader.Request_Date,'-','');
				SET OutputRoot.JSON.Data.ReqBody.XML = jreq;
				SET OutputLocalEnvironment.Destination.HTTP.RequestURL = Environment.Variables.XMLResultREC[1].SFTP_PATH;
				SET Environment.variables.APIPort = Environment.Variables.XMLResultHD[1].PortCode;
				SET Environment.variables.APICall = TRUE;
				SET Environment.variables.AuditSeq = PASSTHRU('SELECT NEXT VALUE FOR IPAOWNER.TPCS_AUDIT_API_SEQ AS SEQ;');
				INSERT INTO Database.PCSIBM.TIBM_LOG_AUDIT_API(API_Request_ID,API_Channel_ID,API_Request_Date,SITE_ID,MS_REF_NO,MSG_TYPE,MSG_DIRECTION,API_URL,API_TIMESTAMP,TRM_STATUS,PAYLOAD_OUT,AUDITSEQ)
				VALUES(Environment.variables.txnID,'IndianPCS',CURRENT_TIMESTAMP,Environment.variables.APIPort,Environment.variables.txnID,'TPRORD','OUTBOUND',Environment.Variables.XMLResultREC[1].SFTP_PATH,CURRENT_TIMESTAMP,'0',jreq,Environment.variables.AuditSeq[1].SEQ);
				COMMIT;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
		    END IF;
			SET OutputRoot.BLOB.BLOB = stringOut;
			SET OutputLocalEnvironment.Destination.File.Name = 'TPRORD' || Environment.variables.txnID || '.xml';			
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.XMLResultREC[1].SFTP_PATH;
		    PROPAGATE TO TERMINAL 'out'; 
		ELSEIF (EXISTS(InputRoot.DFDL[])) THEN	
			SET OutputRoot.Properties.MessageType ='{}:TPRORD';
			SET OutputRoot.Properties.MessageSet ='{JMB_DFDL}';
			SET OutputRoot.Properties.ReplyProtocol = 'FILE';	
			SET OutputRoot.DFDL.TPRORD = InputRoot.DFDL.TPRORD;
			SET OutputLocalEnvironment.Destination.File.Name = 'TPRORD' || Environment.variables.txnID || '.txt';
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.TXTResult2[1].SFTP_PATH;
		    PROPAGATE TO TERMINAL 'out';
		END IF;
		
		SET Environment.variables.fileName = OutputLocalEnvironment.Destination.File.Name;
		SET Environment.variables.fileDirectory = OutputLocalEnvironment.Destination.File.Remote.ServerDirectory;
	END;
CREATE PROCEDURE xmlBeautify( IN unformattedXML CHARACTER)
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.portall.xmlBeautify.XmlBeautifier.prettyFormat";
END MODULE;

CREATE COMPUTE MODULE EDGA_Get_TPRORD_Data_mailSMSCall_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.mailStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILSTARTTIME;');
		SET Environment.variables.mailEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILENDTIME;');
		SET Environment.variables.SMSStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS SMSSTARTTIME;');
		DECLARE response BLOB ASBITSTREAM(InputRoot.JSON.Data, 549,1208);
		DECLARE ReplaceCarriageReturn BLOB X'0d0a';
		SET response = REPLACE(response, ReplaceCarriageReturn);
		SET Environment.variables.response = CAST(response AS CHARACTER CCSID 1208);
		IF (Environment.variables.APICall = TRUE) THEN
			UPDATE Database.PCSIBM.TIBM_LOG_AUDIT_API AS SP SET TRM_STATUS = '1', RES_PAYLOAD = Environment.variables.response WHERE SP.MS_REF_NO = Environment.variables.txnID AND SP.AUDITSEQ = Environment.variables.AuditSeq[1].SEQ;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE EDGA_Get_TPRORD_Data_auditDetails_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.ediEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDIENDTIME;');
		DECLARE ediEndTime CHARACTER  CAST(Environment.variables.ediEndTime[1].EDIENDTIME AS CHARACTER);
		SET ediEndTime = REPLACE(ediEndTime,'TIMESTAMP ','');
	--	SET ediEndTime = SUBSTRING(mailStartTime BEFORE '.');
		SET ediEndTime = SUBSTRING(ediEndTime FROM 2 FOR 23);
		
		DECLARE ediStartTime CHARACTER  CAST(Environment.variables.ediStartTime[1].EDISTARTTIME AS CHARACTER);
		DECLARE mailStartTime CHARACTER  CAST(Environment.variables.mailStartTime[1].MAILSTARTTIME AS CHARACTER);
		DECLARE mailEndTime CHARACTER CAST(Environment.variables.mailEndTime[1].MAILENDTIME AS CHARACTER);
		DECLARE dbStartTime CHARACTER  CAST(Environment.variables.dbStartTime[1].DBSTARTTIME AS CHARACTER);
		DECLARE dbEndTime CHARACTER  CAST(Environment.variables.dbEndTime[1].DBENDTIME AS CHARACTER);
		DECLARE SMSStartTime CHARACTER  CAST(Environment.variables.SMSStartTime[1].SMSSTARTTIME AS CHARACTER);

		SET ediStartTime = REPLACE(ediStartTime,'TIMESTAMP ','');
		SET ediStartTime = SUBSTRING(ediStartTime FROM 2 FOR 23);

		SET mailStartTime = REPLACE(mailStartTime,'TIMESTAMP ','');
		SET mailStartTime = SUBSTRING(mailStartTime FROM 2 FOR 23);

		SET mailEndTime = REPLACE(mailEndTime,'TIMESTAMP ','');
		SET mailEndTime = SUBSTRING(mailEndTime FROM 2 FOR 23);

		SET SMSStartTime = REPLACE(SMSStartTime,'TIMESTAMP ','');
		SET SMSStartTime = SUBSTRING(SMSStartTime FROM 2 FOR 23);

		SET dbStartTime = REPLACE(dbStartTime,'TIMESTAMP ','');
		SET dbStartTime = SUBSTRING(dbStartTime FROM 2 FOR 23);

		SET dbEndTime = REPLACE(dbEndTime,'TIMESTAMP ','');
		SET dbEndTime = SUBSTRING(dbEndTime FROM 2 FOR 23);
		
		DECLARE messageSender CHARACTER;
		DECLARE emailId CHARACTER;
		DECLARE mobileNumber CHARACTER;
		IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
			SET messageSender = Environment.Variables.XMLResultHD[1].SenderID;
			SET emailId = Environment.Variables.XMLResultREC[1].Email_id;
			SET mobileNumber = Environment.Variables.XMLResultREC[1].Mobile;
		ELSE
			SET messageSender = Environment.Variables.TXTResult1[1].SenderID;
			SET emailId = Environment.Variables.TXTResult2[1].Email_id;
			SET mobileNumber = Environment.Variables.TXTResult2[1].Mobile;
		END IF;
		
		SET OutputRoot.XMLNSC.PCS_Audit.Header.MS_REF_NO = Environment.variables.txnID;
		DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Header;
		SET headerRef.MSG_UID = UUIDASCHAR;
		IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
			SET headerRef.MSG_TYPE = 'TPRORD_XML_OUT';
		ELSE
			SET headerRef.MSG_TYPE = 'TPRORD_TXT_OUT';
		END IF;
		SET headerRef.MSG_TIME = ediStartTime;
		SET headerRef.MSG_SNDR = messageSender;
		SET headerRef.PORT_CODE = SUBSTRING( Environment.variables.fileDirectory AFTER 'PORTS/');
		SET headerRef.PORT_CODE = SUBSTRING(headerRef.PORT_CODE BEFORE '/');
		SET OutputRoot.XMLNSC.PCS_Audit.Details.Message.EDI_START_TS = ediStartTime;
		DECLARE messageRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Message;
		SET messageRef.EDI_END_TS = ediEndTime;
		SET messageRef.FILE_NAME = Environment.variables.fileName;
		SET messageRef.EDI_DIRECTORY_INFO = Environment.variables.fileDirectory;

		SET OutputRoot.XMLNSC.PCS_Audit.Details.Email.MAIL_START_TS = mailStartTime;
		DECLARE emailRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Email;
		SET emailRef.MAILING_ID = emailId;
		SET emailRef.MAIL_NOTIFICATION_STATUS = 'Not Sent';
		SET emailRef.MAIL_END_TS = mailEndTime;

		SET OutputRoot.XMLNSC.PCS_Audit.Details.SMS.SMS_START_TS = SMSStartTime;
		DECLARE smsRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.SMS;
		SET smsRef.SMS_NOTIFICATION_NO = mobileNumber;
		SET smsRef.SMS_NOTIFICATION_STATUS = 'Not Sent';

		SET OutputRoot.XMLNSC.PCS_Audit.Details.Database.DB_SP_START_TS = dbStartTime;
		DECLARE databaseRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Database;
		SET databaseRef.DB_SP_END_TS = dbEndTime;
		SET databaseRef.DB_SP_STATUS = 'S';
		SET databaseRef.DB_SP_REMARK = 'Executed successfully';
		
		DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
		DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
		CALL EDI_InsIIBAudit(outputChar);
		COMMIT;
	END;
	CREATE PROCEDURE EDI_InsIIBAudit( IN auditXML CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 0
	EXTERNAL NAME "dbo.EDI_InsIIBAudit";
END MODULE;


CREATE COMPUTE MODULE TPRORD_ErrorUpdate_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE blobdata BLOB;
		DECLARE resp,crmno CHARACTER;
		-- SET blobdata = ASBITSTREAM(InputRoot.JSON.Data);
		SET resp = CAST(InputRoot.BLOB.BLOB as character ccsid 1208);
		SET crmno = Environment.variables.txnID;
		UPDATE Database.PCSIBM.TIBM_LOG_AUDIT_API AS SP SET TRM_STATUS = '0',RES_PAYLOAD = resp WHERE SP.MS_REF_NO = crmno AND SP.AUDITSEQ = Environment.variables.AuditSeq[1].SEQ;
		COMMIT;
		SET OutputRoot = InputRoot;
	END;
END MODULE;