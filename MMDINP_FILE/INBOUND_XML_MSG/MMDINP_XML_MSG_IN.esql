BROKER SCHEMA INBOUND_XML_MSG

DECLARE SFTP_Error_Path_MMDINP EXTERNAL CHARACTER '';
DECLARE SFTP_Server_MMDINP EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE MMDINP_XML_MSG_IN_processFile_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE InXML CHARACTER;
		SET InXML = Environment.Variables.InXML; 
		SET Environment.variables.dbStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBSTARTTIME;');
		CALL Inbound_USP(InXML);
		COMMIT;
		CALL EDI_XGetNotifyDetails(InXML,'MMDINP',Environment.Variables.NresultSet1[], Environment.Variables.NresultSet2[], Environment.Variables.NresultSet3[], Environment.Variables.NresultSet4[], Environment.Variables.NresultSet5[], Environment.Variables.NresultSet6[]);
		SET Environment.variables.dbEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBENDTIME;');
		IF (Environment.Variable.results2[1].ErrorMessage = 'Failed') THEN
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = SFTP_Error_Path_MMDINP;
			SET OutputLocalEnvironment.Destination.File.Remote.Server = SFTP_Server_MMDINP;
			SET OutputLocalEnvironment.Destination.File.Name = Environment.variables.filename;
		ELSE
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = COALESCE(Environment.Variables.NresultSet2[1].SFTP_PATH,Environment.Variables.NresultSet1[1].SFTP_PATH);
			SET OutputLocalEnvironment.Destination.File.Remote.Server = SFTP_Server_MMDINP;
			SET OutputLocalEnvironment.Destination.File.Name = Environment.variables.filename;
		END IF;

		SET OutputRoot.BLOB.BLOB = CAST(InXML AS BLOB CCSID 1208);
		SET Environment.variables.sftpPath = OutputLocalEnvironment.Destination.File.Remote.ServerDirectory;
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE EDI_XGetNotifyDetails (IN Text CHARACTER, IN msgType CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 6
	EXTERNAL NAME "dbo.EDI_XGetNotifyDetails";
	
	CREATE PROCEDURE Inbound_USP (IN T CHARACTER)
	LANGUAGE DATABASE
	EXTERNAL NAME "dbo.EDI_XInsMMDINP" ;
END MODULE;

CREATE COMPUTE MODULE MMDINP_XML_MSG_IN_failure_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.XMLNSC.errorDetails.messageFlowName = MessageFlowLabel;
		SET OutputRoot.XMLNSC.errorDetails.messageBody = Environment.Variables.InXML;
		SET OutputRoot.XMLNSC.errorDetails.exceptionList = InputExceptionList;

		IF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException[])) THEN
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Number;
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException[])) THEN
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Number;
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Insert[3].Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException[])) THEN
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Number;
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Text;
		ELSE
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = 'ER002';
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = 'ESB Exception Occurred';
		END IF;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE MMDINP_XML_MSG_IN_auditDetails_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE charPosCommonRefStart INTEGER POSITION('<CommonRefNumber>' IN Environment.Variables.InXML);
		DECLARE charPosCommonRefEnd INTEGER POSITION('</CommonRefNumber>' IN Environment.Variables.InXML);
		DECLARE commonRefLength INTEGER charPosCommonRefEnd - charPosCommonRefStart;
		SET OutputRoot.XMLNSC.auditDetails.RefNo = SUBSTRING(Environment.Variables.InXML FROM charPosCommonRefStart+17 FOR commonRefLength);
		SET OutputRoot.XMLNSC.auditDetails.RefNo = SUBSTRING(OutputRoot.XMLNSC.auditDetails.RefNo BEFORE '<');
		DECLARE auditDtlsRef REFERENCE TO OutputRoot.XMLNSC.auditDetails;
		SET auditDtlsRef.msgUID = UUIDASCHAR;
		SET auditDtlsRef.msgType = 'MMDINP_XML_IN';
		SET auditDtlsRef.portCode = SUBSTRING(Environment.variables.sftpPath AFTER 'PORTS/');
		SET auditDtlsRef.portCode = SUBSTRING(auditDtlsRef.portCode BEFORE '/');
		DECLARE charPosSenderIdStart INTEGER POSITION('<SenderID>' IN Environment.Variables.InXML);
		DECLARE charPosSenderIdEnd INTEGER POSITION('</SenderID>' IN Environment.Variables.InXML);
		DECLARE senderIdLength INTEGER charPosSenderIdEnd - charPosSenderIdStart;
		SET auditDtlsRef.msgSender = SUBSTRING(Environment.Variables.InXML FROM charPosSenderIdStart+10 FOR senderIdLength);
		SET auditDtlsRef.msgSender = SUBSTRING(auditDtlsRef.msgSender BEFORE '<');
		SET auditDtlsRef.fileName = Environment.variables.filename;
		SET auditDtlsRef.fileDirectory = Environment.variables.sftpPath;
		SET auditDtlsRef.MailId = Environment.Variables.NresultSet2[1].Email_id;
		SET auditDtlsRef.mobileNo = Environment.Variables.NresultSet2[1].Mobile;

		DECLARE ediStartTime CHARACTER CAST(Environment.variables.ediStartTime[1].EDISTARTTIME AS CHARACTER);
		DECLARE mailStartTime CHARACTER CAST(Environment.variables.mailStartTime[1].MAILSTARTTIME AS CHARACTER);
		DECLARE mailEndTime CHARACTER CAST(Environment.variables.mailEndTime[1].MAILENDTIME AS CHARACTER);
		DECLARE dbStartTime CHARACTER CAST(Environment.variables.dbStartTime[1].DBSTARTTIME AS CHARACTER);
		DECLARE dbEndTime CHARACTER CAST(Environment.variables.dbEndTime[1].DBENDTIME AS CHARACTER);
		DECLARE SMSStartTime CHARACTER CAST(Environment.variables.SMSStartTime[1].SMSSTARTTIME AS CHARACTER);

		SET ediStartTime = REPLACE(ediStartTime,'TIMESTAMP ','');
		-- SET ediStartTime = SUBSTRING(ediStartTime BEFORE '.');
		SET ediStartTime = SUBSTRING(ediStartTime FROM 2 FOR 23);
		SET auditDtlsRef.ediStartTime = ediStartTime;

		SET mailStartTime = REPLACE(mailStartTime,'TIMESTAMP ','');
		-- SET mailStartTime = SUBSTRING(mailStartTime BEFORE '.');
		SET mailStartTime = SUBSTRING(mailStartTime FROM 2 FOR 23);
		SET auditDtlsRef.mailStartTime = mailStartTime;

		SET mailEndTime = REPLACE(mailEndTime,'TIMESTAMP ','');
		-- SET mailEndTime = SUBSTRING(mailEndTime BEFORE '.');
		SET mailEndTime = SUBSTRING(mailEndTime FROM 2 FOR 23);
		SET auditDtlsRef.mailEndTime = mailEndTime;

		SET SMSStartTime = REPLACE(SMSStartTime,'TIMESTAMP ','');
		-- SET SMSStartTime = SUBSTRING(SMSStartTime BEFORE '.');
		SET SMSStartTime = SUBSTRING(SMSStartTime FROM 2 FOR 23);
		SET auditDtlsRef.SMSStartTime = SMSStartTime;

		SET dbStartTime = REPLACE(dbStartTime,'TIMESTAMP ','');
		-- SET dbStartTime = SUBSTRING(dbStartTime BEFORE '.');
		SET dbStartTime = SUBSTRING(dbStartTime FROM 2 FOR 23);
		SET auditDtlsRef.dbStartTime = dbStartTime;

		SET dbEndTime = REPLACE(dbEndTime,'TIMESTAMP ','');
		-- SET dbEndTime = SUBSTRING(dbEndTime BEFORE '.');
		SET dbEndTime = SUBSTRING(dbEndTime FROM 2 FOR 23);
		SET auditDtlsRef.dbEndTime = dbEndTime;
	END;
END MODULE;

CREATE COMPUTE MODULE MMDINP_XML_MSG_IN_mailSMSCall_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.mailStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILSTARTTIME;');
		SET Environment.variables.mailEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILENDTIME;');
		SET Environment.variables.SMSStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS SMSSTARTTIME;');
	END;
END MODULE;

CREATE COMPUTE MODULE MMDINP_XML_MSG_IN_xmlValidate_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE InXML CHARACTER;
		SET InXML = Environment.Variables.InXML;

		DECLARE incField, pfield CHAR;
		DECLARE bF BLOB;
		SET incField = InXML;
		SET bF = CAST(incField AS BLOB CCSID 1208);
		DECLARE inCCSID INT InputProperties.CodedCharSetId;
		DECLARE inEncoding INT InputProperties.Encoding;
		DECLARE inBitStream BLOB ASBITSTREAM(InputRoot.BLOB, inEncoding, inCCSID);
		CREATE LASTCHILD OF OutputLocalEnvironment DOMAIN('XMLNSC') PARSE(bF, inEncoding, inCCSID,'BLOB', 'XMLNSC');
		SET OutputRoot.XMLNSC = OutputLocalEnvironment.XMLNSC;
	END;
END MODULE;