BROKER SCHEMA OUTBOUND_TEXT_XML


CREATE COMPUTE MODULE EDGA_Get_GTINAP_Data_GetFormatType_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.ediStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDISTARTTIME;');
		SET Environment.variables.txnID = InputRoot.XMLNSC.PCS.Common_Ref;
		DECLARE MessageName CHARACTER InputRoot.XMLNSC.PCS.Action_In;
		DECLARE request BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
		DECLARE ReplaceCarriageReturn BLOB X'0d0a';			
		SET request = REPLACE(request, ReplaceCarriageReturn);
		SET Environment.variables.request = CAST(request AS CHARACTER CCSID 1208);
		SET Environment.variables.dbStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBSTARTTIME;');
		CALL EDI_GetFormatTypeByRefAndMsg(Environment.variables.txnID,MessageName,Environment.Variables.Result[],Environment.Variables.Result56[]);		
	END;

	CREATE PROCEDURE EDI_GetFormatTypeByRefAndMsg( IN TransactionID CHARACTER,IN MessageName CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 2
	EXTERNAL NAME "dbo.EDI_GetFormatTypeByRefAndMsg";
END MODULE;


CREATE COMPUTE MODULE EDGA_Get_GTINAP_Data_xmlCreation_Compute
CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN	
		CALL EDI_XGetGTINAP(Environment.variables.txnID,Environment.Variables.Result1[],Environment.Variables.Result2[],Environment.Variables.Result3[],Environment.Variables.Result4[],Environment.Variables.Result5[],Environment.Variables.Result6[],Environment.Variables.Result7[],Environment.Variables.Result8[],Environment.Variables.Result9[],Environment.Variables.Result10[]);
		SET Environment.variables.dbEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBENDTIME;');
		DECLARE i INTEGER 1;
		SET OutputRoot.XMLNSC.GateInAppointmentBook.DocumentHeader.DocumentReference.DocumentType = Environment.Variables.Result1[1].DocumentType;

		DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.GateInAppointmentBook.DocumentHeader.DocumentReference;

		SET headerRef.DocumentName = Environment.Variables.Result1[1].DocumentName;
		SET headerRef.DocumentNumber = Environment.Variables.Result1[1].DocumentNumber;
		SET headerRef.CommonRefNumber = Environment.Variables.Result1[1].CommonRefNumber;
		SET headerRef.MessageType = Environment.Variables.Result1[1].MessageType;
		SET headerRef.SenderID = Environment.Variables.Result1[1].SenderID;
		SET headerRef.PortCode = Environment.Variables.Result1[1].PortCode;


		DECLARE recPartyCardinality INTEGER CARDINALITY (Environment.Variables.Result8[]);
		DECLARE notPartyCardinality INTEGER CARDINALITY (Environment.Variables.Result9[]);
		WHILE (i <= recPartyCardinality) DO
			SET OutputRoot.XMLNSC.GateInAppointmentBook.DocumentHeader.DocumentExchangeDetails.ReceivingPartyDetails.ReceivingParty[i] = Environment.Variables.Result8[i].ReceivingParty;
			SET i = i + 1;
		END WHILE;
		SET i = 1;
		WHILE (i <= notPartyCardinality) DO
			SET OutputRoot.XMLNSC.GateInAppointmentBook.DocumentHeader.DocumentExchangeDetails.NotifyPartyDetails.NotifyParty[i] = Environment.Variables.Result9[i].NotofyParty;
			SET i = i + 1;
		END WHILE;

		SET OutputRoot.XMLNSC.GateInAppointmentBook.DocumentDetails.GateInAppointmentDetails.RecordType = Environment.Variables.Result1[1].RecordType;
		DECLARE getaptdetails REFERENCE TO OutputRoot.XMLNSC.GateInAppointmentBook.DocumentDetails.GateInAppointmentDetails;
		SET getaptdetails.VCN = Environment.Variables.Result1[1].VCN;
		SET getaptdetails.CallSign = Environment.Variables.Result1[1].CallSign;
		SET getaptdetails.EDTA = Environment.Variables.Result1[1].EDTA;
		SET getaptdetails.IMONumber = Environment.Variables.Result1[1].IMONumber;
		SET getaptdetails.IGMNumber = Environment.Variables.Result1[1].IGMNumber;
		SET getaptdetails.IGMDate = Environment.Variables.Result1[1].IGMDate;
		
		IF LENGTH(COALESCE(Environment.Variables.Result1[1].ROTATION_NO,'')) > 0 THEN
			SET getaptdetails.RotationNumber = Environment.Variables.Result1[1].RotationNumber;
		END IF;
		
		IF LENGTH(COALESCE(Environment.Variables.Result1[1].ROTATION_DATE,'')) > 0 THEN
			SET getaptdetails.RotationDate = Environment.Variables.Result1[1].RotationDate;
		END IF;
		
		SET getaptdetails.TransporterDetails.TransporterRegistrationNumber = Environment.Variables.Result2[1].TransporterRegistrationNumber;
		DECLARE transportRef REFERENCE TO getaptdetails.TransporterDetails;
		SET transportRef.TransporterName = Environment.Variables.Result2[1].TransporterName;
		SET transportRef.TransporterContactDetails = Environment.Variables.Result2[1].TransporterContactDetails;
		SET transportRef.TransporterEmailID = Environment.Variables.Result2[1].TransporterEmailID;
		
		SET getaptdetails.VehicleDetails.VehicleRegistrationNumber = Environment.Variables.Result3[1].VehicleRegistrationNumber;
		SET getaptdetails.VehicleDetails.VehicleSize = Environment.Variables.Result3[1].VehicleSize;
		
		DECLARE containerCardinality INTEGER CARDINALITY(Environment.Variables.Result4[]);
		DECLARE containerCnt INTEGER 1;
		WHILE (containerCnt <= containerCardinality) DO
			SET getaptdetails.VehicleDetails.ContainerDetails[containerCnt].ContainerNumber = Environment.Variables.Result4[containerCnt].CONTAINER_NO;
			SET getaptdetails.VehicleDetails.ContainerDetails[containerCnt].ContainerSize = Environment.Variables.Result4[containerCnt].ContainerSize;
			SET containerCnt = containerCnt + 1;
		END WHILE;
		
		SET getaptdetails.VehicleDetails.CargoDetails.CargoType = Environment.Variables.Result5[1].CargoType;
		DECLARE cargoRef REFERENCE TO getaptdetails.VehicleDetails.CargoDetails;
		SET cargoRef.CargoDescription = Environment.Variables.Result5[1].CargoDescription;
		SET cargoRef.CargoQuantity = Environment.Variables.Result5[1].CargoQuantity;
		SET cargoRef.CargoUOMMT = Environment.Variables.Result5[1].CargoUOM;
		
		SET getaptdetails.VehicleDetails.DriverDetails.DriverName = Environment.Variables.Result6[1].DriverName;
		DECLARE driverDtlsRef REFERENCE TO getaptdetails.VehicleDetails.DriverDetails;
		SET driverDtlsRef.DriverContactNumber = Environment.Variables.Result6[1].DriverContactNumber;
		SET driverDtlsRef.DriverLicenseNumber = Environment.Variables.Result6[1].DriverLicenseNumber;
		
		SET getaptdetails.GateScheduleDetails.GateSchedule.GateInWindowFrom = Environment.Variables.Result7[1].GateInWindowFrom;
		SET getaptdetails.GateScheduleDetails.GateSchedule.GateInWindowUpto = Environment.Variables.Result7[1].GateInWindowUpto;
		
		SET getaptdetails.CutoOffDateAndTime = Environment.Variables.Result1[1].CutoOffDateAndTime;
		
		SET OutputRoot.XMLNSC.GateInAppointmentBook.DocumentSummary.IssuedDateTime = Environment.Variables.Result10[1].IssuedDateTime;
		RETURN TRUE;
	END;

	CREATE PROCEDURE EDI_XGetGTINAP( IN TransactionID CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 10
	EXTERNAL NAME "dbo.EDI_XGetGTINAP";

END MODULE;


CREATE COMPUTE MODULE EDGA_Get_GTINAP_Data_textCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL EDI_TGetGTINAP(Environment.variables.txnID,Environment.Variables.TXTResult1[],Environment.Variables.TXTResult2[],Environment.Variables.TXTResult3[],Environment.Variables.TXTResult4[],Environment.Variables.TXTResult5[],Environment.Variables.TXTResult6[]);
		SET Environment.variables.dbEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBENDTIME;');
		
		--UNH
		SET OutputRoot.DFDL.GTINAP.Header.Values = COALESCE(Environment.Variables.TXTResult1[1].DocumentType,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].DocumentName,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].DocumentNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].CommonRefNumber,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].MessageType,'')||''||
		COALESCE(Environment.Variables.TXTResult1[1].SenderID,'');
		
		--RPD		
		DECLARE RecieveCount INTEGER CARDINALITY (Environment.Variables.TXTResult2[]);
		DECLARE Recipientlist CHARACTER;
		DECLARE K INTEGER 1;
		WHILE K <= RecieveCount DO
			IF K = 1 THEN
				SET Recipientlist = ''||Environment.Variables.TXTResult2[1].ReceivingParty; 
			ELSE
				SET Recipientlist = COALESCE(Recipientlist,'')||''||Environment.Variables.TXTResult2[K].ReceivingParty;
			END IF;
			SET K=K+1;
		END WHILE ;
		SET Recipientlist = TRIM(LEADING '' FROM Recipientlist);	
		SET OutputRoot.DFDL.GTINAP.RDP.BodyValues = Recipientlist;
		
		--NPD
		DECLARE RecieveCountNPD INTEGER CARDINALITY(Environment.Variables.TXTResult3[]);
		DECLARE RecipientlistNPD CHARACTER;
		DECLARE T INTEGER 1;
		WHILE T <= RecieveCountNPD DO
			IF T =1 THEN
				SET RecipientlistNPD = ''||Environment.Variables.TXTResult3[1].NotifyParty; 
			ELSE
				SET RecipientlistNPD = COALESCE(RecipientlistNPD,'')||''||Environment.Variables.TXTResult3[T].NotifyParty;
			END IF;			
			SET T=T+1;
		END WHILE ;
		SET RecipientlistNPD = TRIM(LEADING '' FROM RecipientlistNPD);
		SET OutputRoot.DFDL.GTINAP.NPD.BodyValues = RecipientlistNPD;
		
		--DGD
		SET OutputRoot.DFDL.GTINAP.DGD.DGDValues = COALESCE(Environment.Variables.TXTResult4[1].RecordType,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].VCN_NO,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].CALL_SIGN,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].ETA,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].IMO_NUMBER,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].IGM_NO,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].IGM_DATE,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].ROTATION_NO,'')||''||
		COALESCE(Environment.Variables.TXTResult4[1].ROTATION_DATE,'');		
			
		
		--GSD
		
		SET OutputRoot.DFDL.GTINAP.GSD.GSDValues = COALESCE(Environment.Variables.TXTResult5[1].GateInWindowFrom,'')||''||	
		COALESCE(Environment.Variables.TXTResult5[1].GateInWindowUpto,'')||''||	
		COALESCE(Environment.Variables.TXTResult5[1].TypeOfCargo,'')||''||	
		COALESCE(Environment.Variables.TXTResult5[1].NumberOfContainerTobeDelivered,'')||''||	
		COALESCE(Environment.Variables.TXTResult5[1].CutoOffDateAndTime,'');
		
		--UNT
		
		SET OutputRoot.DFDL.GTINAP.trailer.Trailvalues = Environment.Variables.TXTResult6[1].IssuedDateTime;


		
		
	END;
	CREATE PROCEDURE EDI_TGetGTINAP( IN TransactionID CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 6
	EXTERNAL NAME "dbo.EDI_TGetGTINAP";
END MODULE;

CREATE COMPUTE MODULE EDGA_Get_GTINAP_Data_FailureResp_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE errorCode CHARACTER;
		DECLARE errorText CHARACTER;
		IF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Number;
			SET errorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Number;
			SET errorText = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Insert[3].Text;		
		ELSEIF (Environment.variables.noResultbyProcedure = TRUE) THEN
			SET errorCode = 'ERR01';
			SET errorText = 'No resultset obtained from EDI_GetFormatTypeByRefAndMsg procedure';
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Number;
			SET errorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Text;
		ELSE
			SET errorCode = 'ERR01';
			SET errorText = 'ESB exception occurred';
		END IF;
		
		DECLARE currTime CHARACTER CURRENT_TIMESTAMP;
		SET currTime = REPLACE(currTime,'TIMESTAMP ','');
		SET currTime = SUBSTRING(currTime BEFORE '.');
		SET currTime = SUBSTRING(currTime FROM 2);
		SET OutputRoot.XMLNSC.MQI_ERRORS.UserExceptionTree.Executiongroup = ExecutionGroupLabel;
		DECLARE userExcepRef REFERENCE TO OutputRoot.XMLNSC.MQI_ERRORS.UserExceptionTree;
		SET userExcepRef.Brokername = BrokerName;
		SET userExcepRef.FlowName = MessageFlowLabel;
		SET userExcepRef.ErrorCode = errorCode;
		SET userExcepRef.ErrorText = errorText;		


		SET OutputRoot.XMLNSC.MQI_ERRORS.TIMESTAMP = currTime;

		SET OutputRoot.XMLNSC.MQI_ERRORS.MsgBody = Environment.variables.request;

		SET OutputRoot.XMLNSC.MQI_ERRORS.ExceptionList = InputExceptionList;

		DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
		DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
		CALL EDI_InsIIBError(outputChar);
		COMMIT;

		RETURN TRUE;
	END;
	CREATE PROCEDURE EDI_InsIIBError( IN errorXML CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 0
	EXTERNAL NAME "dbo.EDI_InsIIBError";
END MODULE;


CREATE COMPUTE MODULE EDGA_Get_GTINAP_Data_FileCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF (EXISTS(InputRoot.XMLNSC[])) THEN
			DECLARE outputBlob BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
			DECLARE ReplaceCarriageReturn BLOB X'0d0a';

			SET outputBlob = REPLACE(outputBlob, ReplaceCarriageReturn);
			SET Environment.Variables.charData = CAST(outputBlob AS CHARACTER CCSID 1208);
			SET OutputRoot.XMLNSC = xmlBeautify(Environment.Variables.charData);
			SET OutputRoot.XMLNSC.root = SUBSTRING(OutputRoot.XMLNSC AFTER '?>');
			DECLARE stringOut BLOB;
			SET stringOut = CAST(OutputRoot.XMLNSC.root as BLOB CCSID 1208);

			SET OutputRoot.BLOB.BLOB = stringOut;			
			SET OutputLocalEnvironment.Destination.File.Name = 'GTINAP' || Environment.variables.txnID || '.xml';
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.Result8[1].SFTP_PATH;
		ELSEIF (EXISTS(InputRoot.DFDL[])) THEN
		--	SET OutputRoot.Properties.MessageType ='{}:JOBORDER';
		--	SET OutputRoot.Properties.MessageSet ='{JMB_DFDL}';
			SET OutputRoot.Properties.ReplyProtocol = 'FILE';	
			SET OutputRoot.DFDL.GTINAP = InputRoot.DFDL.GTINAP;		
			SET OutputLocalEnvironment.Destination.File.Name = 'GTINAP' || Environment.variables.txnID || '.txt';
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.TXTResult2[1].SFTP_PATH;
		END IF;
		SET Environment.variables.fileName = OutputLocalEnvironment.Destination.File.Name;
		SET Environment.variables.fileDirectory = OutputLocalEnvironment.Destination.File.Remote.ServerDirectory;
	END;
	CREATE PROCEDURE xmlBeautify( IN unformattedXML CHARACTER)
	RETURNS CHARACTER
	LANGUAGE JAVA
	EXTERNAL NAME "com.portall.xmlBeautify.XmlBeautifier.prettyFormat";
END MODULE;

CREATE COMPUTE MODULE EDGA_Get_GTINAP_Data_mailSMSCall_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.mailStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILSTARTTIME;');
		SET Environment.variables.mailEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILENDTIME;');
		SET Environment.variables.SMSStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS SMSSTARTTIME;');
	END;
END MODULE;

CREATE COMPUTE MODULE EDGA_Get_GTINAP_Data_auditDetails_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.ediEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDIENDTIME;');
		DECLARE ediEndTime CHARACTER  CAST(Environment.variables.ediEndTime[1].EDIENDTIME AS CHARACTER);
		SET ediEndTime = REPLACE(ediEndTime,'TIMESTAMP ','');
		SET ediEndTime = SUBSTRING(ediEndTime FROM 2 FOR 23);
		
		DECLARE ediStartTime CHARACTER  CAST(Environment.variables.ediStartTime[1].EDISTARTTIME AS CHARACTER);
		DECLARE mailStartTime CHARACTER  CAST(Environment.variables.mailStartTime[1].MAILSTARTTIME AS CHARACTER);
		DECLARE mailEndTime CHARACTER CAST(Environment.variables.mailEndTime[1].MAILENDTIME AS CHARACTER);
		DECLARE dbStartTime CHARACTER  CAST(Environment.variables.dbStartTime[1].DBSTARTTIME AS CHARACTER);
		DECLARE dbEndTime CHARACTER  CAST(Environment.variables.dbEndTime[1].DBENDTIME AS CHARACTER);
		DECLARE SMSStartTime CHARACTER  CAST(Environment.variables.SMSStartTime[1].SMSSTARTTIME AS CHARACTER);

		SET ediStartTime = REPLACE(ediStartTime,'TIMESTAMP ','');
		SET ediStartTime = SUBSTRING(ediStartTime FROM 2 FOR 23);

		SET mailStartTime = REPLACE(mailStartTime,'TIMESTAMP ','');
		SET mailStartTime = SUBSTRING(mailStartTime FROM 2 FOR 23);

		SET mailEndTime = REPLACE(mailEndTime,'TIMESTAMP ','');
		SET mailEndTime = SUBSTRING(mailEndTime FROM 2 FOR 23);

		SET SMSStartTime = REPLACE(SMSStartTime,'TIMESTAMP ','');
		SET SMSStartTime = SUBSTRING(SMSStartTime FROM 2 FOR 23);

		SET dbStartTime = REPLACE(dbStartTime,'TIMESTAMP ','');
		SET dbStartTime = SUBSTRING(dbStartTime FROM 2 FOR 23);

		SET dbEndTime = REPLACE(dbEndTime,'TIMESTAMP ','');
		SET dbEndTime = SUBSTRING(dbEndTime FROM 2 FOR 23);
		
		DECLARE messageSender CHARACTER;
		DECLARE emailId CHARACTER;
		DECLARE mobileNumber CHARACTER;
		IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
			SET messageSender = Environment.Variables.Result1[1].SenderID;
			SET emailId = Environment.Variables.Result8[1].Email_id;
			SET mobileNumber = Environment.Variables.Result8[1].Mobile;
		ELSE
			SET messageSender = Environment.Variables.TXTResult1[1].SenderID;
			SET emailId = Environment.Variables.TXTResult2[1].Email_id;
			SET mobileNumber = Environment.Variables.TXTResult2[1].Mobile;
		END IF;
		
		SET OutputRoot.XMLNSC.PCS_Audit.Header.MS_REF_NO = Environment.variables.txnID;
		DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Header;
		SET headerRef.MSG_UID = UUIDASCHAR;
		IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
			SET headerRef.MSG_TYPE = 'GTINAP_XML_OUT';
		ELSE
			SET headerRef.MSG_TYPE = 'GTINAP_TXT_OUT';
		END IF;
		SET headerRef.MSG_TIME = ediStartTime;
		SET headerRef.MSG_SNDR = messageSender;
		SET headerRef.PORT_CODE = SUBSTRING(Environment.variables.fileDirectory AFTER 'PORTS/');
		SET headerRef.PORT_CODE = SUBSTRING(headerRef.PORT_CODE BEFORE '/');
		SET headerRef.EVENT_NAME = 'Generation';
		SET OutputRoot.XMLNSC.PCS_Audit.Details.Message.EDI_START_TS = ediStartTime;
		DECLARE messageRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Message;
		SET messageRef.EDI_END_TS = ediEndTime;
		SET messageRef.FILE_NAME = Environment.variables.fileName;
		SET messageRef.EDI_DIRECTORY_INFO = Environment.variables.fileDirectory;
		
		SET OutputRoot.XMLNSC.PCS_Audit.Details.Email.MAIL_START_TS = mailStartTime;
		DECLARE emailRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Email;
		SET emailRef.MAILING_ID = emailId;
		SET emailRef.MAIL_NOTIFICATION_STATUS = 'Not Sent';
		SET emailRef.MAIL_END_TS = mailEndTime;

		SET OutputRoot.XMLNSC.PCS_Audit.Details.SMS.SMS_START_TS = SMSStartTime;
		DECLARE smsRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.SMS;
		SET smsRef.SMS_NOTIFICATION_NO = mobileNumber;
		SET smsRef.SMS_NOTIFICATION_STATUS = 'Not Sent';

		SET OutputRoot.XMLNSC.PCS_Audit.Details.Database.DB_SP_START_TS = dbStartTime;
		DECLARE databaseRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Database;
		SET databaseRef.DB_SP_END_TS = dbEndTime;
		SET databaseRef.DB_SP_STATUS = 'S';
		SET databaseRef.DB_SP_REMARK = 'Executed successfully';
		
		DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
		DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
		CALL EDI_InsIIBAudit(outputChar);
		COMMIT;
	END;
	CREATE PROCEDURE EDI_InsIIBAudit( IN auditXML CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 0
	EXTERNAL NAME "dbo.EDI_InsIIBAudit";
END MODULE;
